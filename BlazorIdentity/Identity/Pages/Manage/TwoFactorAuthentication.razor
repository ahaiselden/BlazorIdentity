@layout BlazorIdentity.Identity.Pages.Manage._Layout

@page "/Identity/Manage/TwoFactorAuthentication"

@using BlazorIdentity.Identity;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.Extensions.Logging;
@using Microsoft.AspNetCore.WebUtilities;
@using System.ComponentModel.DataAnnotations;
@using System.Text;

@inject UserManager<IdentityUser> _userManager;
@inject NavigationManager NavigationManager;
@inject SignInManager<IdentityUser> _signInManager;
@inject ILogger<Identity.Pages.Login> _logger;
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView Context="authContext">
    <Authorized>
        <h4>Two-factor authentication (2FA)</h4>

        <StatusMessage Message="@StatusMessage"></StatusMessage>

        <div class="row">
            <div class="col-md-6">
                @if (Is2faEnabled)
                {
                    if (RecoveryCodesLeft == 0)
                    {
                        <div class="alert alert-danger">
                            <strong>You have no recovery codes left.</strong>
                            <p>You must <a href="/Identity/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a> before you can log in with a recovery code.</p>
                        </div>
                    }
                    else if (RecoveryCodesLeft == 1)
                    {
                        <div class="alert alert-danger">
                            <strong>You have 1 recovery code left.</strong>
                            <p>You can <a href="/Identity/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a>.</p>
                        </div>
                    }
                    else if (RecoveryCodesLeft <= 3)
                    {
                        <div class="alert alert-warning">
                            <strong>You have @RecoveryCodesLeft recovery codes left.</strong>
                            <p>You should <a href="/Identity/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a>.</p>
                        </div>
                    }

                    if (IsMachineRemembered)
                    {

                        <EditForm OnSubmit="OnSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <button type="submit" class="btn btn-default">Forget this browser</button>
                        </EditForm>
                    }
                    <a href="/Identity/Manage/Disable2fa" class="btn btn-default">Disable 2FA</a>
                    <a href="/Identity/ManageGenerateRecoveryCodes" class="btn btn-default">Reset recovery codes</a>
                }

                <h5>Authenticator app</h5>
                @if (!HasAuthenticator)
                {
                    <a id="enable-authenticator" href="/Identity/Manage/EnableAuthenticator" class="btn btn-default">Add authenticator app</a>
                }
                else
                {
                    <a id="enable-authenticator" href="/Identity/Manage/EnableAuthenticator" class="btn btn-default">Setup authenticator app</a>
                    <a id="reset-authenticator" href="/Identity/Manage/ResetAuthenticator" class="btn btn-default">Reset authenticator app</a>
                }
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <h1>Authentication Failure!</h1>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    public string StatusMessage { get; set; }

    public bool Is2faEnabled { get; set; }
    public bool HasAuthenticator { get; set; }
    public bool IsMachineRemembered { get; set; }
    public int RecoveryCodesLeft { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = await _userManager.GetUserAsync(authState.User);
        if (user == null)
        {
            StatusMessage = $"Unable to load user with ID '{_userManager.GetUserId(authState.User)}'.";
        }

        HasAuthenticator = await _userManager.GetAuthenticatorKeyAsync(user) != null;
        Is2faEnabled = await _userManager.GetTwoFactorEnabledAsync(user);

        //TODO something with this signinmanager call
        //IsMachineRemembered = await _signInManager.IsTwoFactorClientRememberedAsync(user);

        RecoveryCodesLeft = await _userManager.CountRecoveryCodesAsync(user);
    }

    private async void OnSubmit(EditContext editContext)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = await _userManager.GetUserAsync(authState.User);
        if (user == null)
        {
            StatusMessage = $"Unable to load user with ID '{_userManager.GetUserId(authState.User)}'.";
        }

        //TODO something with this signinmanager call
        //await _signInManager.ForgetTwoFactorClientAsync();
        StatusMessage = "The current browser has been forgotten. When you login again from this browser you will be prompted for your 2fa code.";

        StateHasChanged();
    }
}
