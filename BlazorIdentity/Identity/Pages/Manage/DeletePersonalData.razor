@layout BlazorIdentity.Identity.Pages.Manage._Layout

@page "/Identity/Manage/DeletePersonalData"

@using BlazorIdentity.Identity;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.Extensions.Logging;
@using Microsoft.AspNetCore.WebUtilities;
@using System.ComponentModel.DataAnnotations;
@using System.Text;

@inject UserManager<IdentityUser> _userManager;
@inject NavigationManager NavigationManager;
@inject SignInManager<IdentityUser> _signInManager;
@inject ILogger<Identity.Pages.Manage.DeletePersonalData> _logger;
@inject IHttpContextAccessor httpContextAccessor;

<AuthorizeView Context="authContext">
    <Authorized>
        <h4>Delete Personal Data</h4>

        <StatusMessage Message="@StatusMessage"></StatusMessage>

        <div class="row">
            <EditForm EditContext="editContext" OnSubmit="OnSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                @if (RequirePassword)
                {
                    <div class="form-group">
                        Password
                        <InputText type="password" class="form-control" @bind-Value="inputModel.Password"></InputText>
                        <ValidationMessage For="@(() => inputModel.Password)" />
                    </div>
                }
                <button class="btn btn-danger" type="submit">Delete data and close my account</button>
            </EditForm>
        </div>
    </Authorized>
    <NotAuthorized>
        <h1>Authentication Failure!</h1>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    public string StatusMessage { get; set; }

    public EditContext editContext { get; set; }

    public InputModel inputModel { get; set; }

    public bool RequirePassword { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = await _userManager.GetUserAsync(httpContextAccessor.HttpContext.User);
        if (user == null)
        {
            StatusMessage = $"Unable to load user with ID '{_userManager.GetUserId(httpContextAccessor.HttpContext.User)}'.";
            return;
        }

        RequirePassword = await _userManager.HasPasswordAsync(user);

        editContext = new EditContext(inputModel);
    }

    private async void OnSubmit(EditContext editContext)
    {
        var user = await _userManager.GetUserAsync(httpContextAccessor.HttpContext.User);
        if (user == null)
        {
            StatusMessage = $"Unable to load user with ID '{_userManager.GetUserId(httpContextAccessor.HttpContext.User)}'.";
        }

        RequirePassword = await _userManager.HasPasswordAsync(user);
        if (RequirePassword)
        {
            if (!await _userManager.CheckPasswordAsync(user, inputModel.Password))
            {
                StatusMessage = "Incorrect password.";
                return;
            }
        }

        var result = await _userManager.DeleteAsync(user);
        var userId = await _userManager.GetUserIdAsync(user);

        if (!result.Succeeded)
        {
            StatusMessage = $"Unexpected error occurred deleting user with ID '{userId}'.";
        }

        await _signInManager.SignOutAsync();

        _logger.LogInformation("User with ID '{UserId}' deleted themselves.", userId);

        NavigationManager.NavigateTo("/Index");
    }

    public class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; }
    }
}
