@layout BlazorIdentity.Identity.Pages.Manage._Layout

@page "/Identity/Manage"

@using BlazorIdentity.Identity;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.Extensions.Logging;
@using Microsoft.AspNetCore.WebUtilities;
@using System.ComponentModel.DataAnnotations;
@using System.Text;

@inject UserManager<IdentityUser> _userManager;
@inject NavigationManager NavigationManager;
@inject SignInManager<IdentityUser> _signInManager;
@inject ILogger<Identity.Pages.Login> _logger;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient httpClient;

<AuthorizeView Context="authContext">
    <Authorized>
        <h4>Profile</h4>

        <StatusMessage Message="@StatusMessage"></StatusMessage>

        <div class="row">
            <div class="col-md-6">
                <EditForm Model="inputModel" OnSubmit="OnSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        Username
                        <input class="form-control" value="@Username" disabled />
                    </div>

                    <div class="form-group">
                        Phone number
                        <InputText class="form-control" @bind-Value="inputModel.PhoneNumber"></InputText>
                        <ValidationMessage For="@(() => inputModel.PhoneNumber)" />
                    </div>
                    <button type="submit" class="btn btn-primary">Save</button>
                </EditForm>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <h1>Authentication Failure!</h1>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    public string StatusMessage { get; set; }

    public InputModel inputModel { get; set; } = new InputModel();

    public string Username { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = await (_userManager.GetUserAsync(authState.User));

        if (user == null)
        {
            StatusMessage = $"Unable to load user with ID '{_userManager.GetUserId(authState.User)}'.";
        }
        else
        {
            var userName = await _userManager.GetUserNameAsync(user);
            var phoneNumber = await _userManager.GetPhoneNumberAsync(user);

            inputModel = new InputModel
            {
                PhoneNumber = phoneNumber
            };

            Username = userName;
        }
    }

    private async void OnSubmit(EditContext editContext)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = await _userManager.GetUserAsync(authState.User);
        if (user == null)
        {
            StatusMessage = $"Unable to load user with ID '{_userManager.GetUserId(authState.User)}'.";
        }
        else
        {
            if (!editContext.Validate())
            {

            }
            else
            {
                var phoneNumber = await _userManager.GetPhoneNumberAsync(user);
                if (inputModel.PhoneNumber != phoneNumber)
                {
                    var setPhoneResult = await _userManager.SetPhoneNumberAsync(user, inputModel.PhoneNumber);
                    if (!setPhoneResult.Succeeded)
                    {
                        StatusMessage = "Unexpected error when trying to set phone number.";
                    }
                }

                var result = await httpClient.GetAsync("/Identity/Manage/SignInRefresh");
                if (result.IsSuccessStatusCode)
                {
                    StatusMessage = "Your profile has been updated";
                }
                else
                {
                    StatusMessage = "Unexpected error when trying to set phone number.";
                }

                StateHasChanged();
            }
        }

        editContext = new EditContext(inputModel);
    }

    public class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string PhoneNumber { get; set; }
    }
}
