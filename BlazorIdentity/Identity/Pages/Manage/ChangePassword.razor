@layout BlazorIdentity.Identity.Pages.Manage._Layout

@page "/Identity/Manage/ChangePassword"

@using BlazorIdentity.Identity;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.Extensions.Logging;
@using Microsoft.AspNetCore.WebUtilities;
@using System.ComponentModel.DataAnnotations;
@using System.Text;

@inject UserManager<IdentityUser> _userManager;
@inject NavigationManager NavigationManager;
@inject SignInManager<IdentityUser> _signInManager;
@inject ILogger<Identity.Pages.Login> _logger;
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView Context="authContext">
    <Authorized>
        <h4>Change password</h4>

        <StatusMessage Message="@StatusMessage"></StatusMessage>

        <div class="row">
            <EditForm Model="inputModel" OnSubmit="OnChangePasswordSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    Old password
                    <InputText type="password" class="form-control" @bind-Value="inputModel.OldPassword"></InputText>
                    <ValidationMessage For="@(() => inputModel.OldPassword)" />
                </div>
                <div class="form-group">
                    New password
                    <InputText type="password" class="form-control" @bind-Value="inputModel.NewPassword"></InputText>
                    <ValidationMessage For="@(() => inputModel.NewPassword)" />
                </div>
                <div class="form-group">
                    Confirm new password
                    <InputText type="password" class="form-control" @bind-Value="inputModel.ConfirmPassword"></InputText>
                    <ValidationMessage For="@(() => inputModel.ConfirmPassword)" />
                </div>
                <button type="submit" class="btn btn-primary">Update password</button>
            </EditForm>
        </div>
    </Authorized>
    <NotAuthorized>
        <h1>Authentication Failure!</h1>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    public string StatusMessage { get; set; }

    public InputModel inputModel { get; set; } = new InputModel();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await _userManager.GetUserAsync(authState.User);
        if (user == null)
        {
            StatusMessage = $"Unable to load user with ID '{_userManager.GetUserId(authState.User)}'.";
        }

        var hasPassword = await _userManager.HasPasswordAsync(user);

        if (!hasPassword)
        {
            NavigationManager.NavigateTo("/Identity/Manage/SetPassword");
            return;
        }
    }

    private async void OnChangePasswordSubmit(EditContext editContext)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (!editContext.Validate())
        {
            return;
        }
        else
        {
            var user = await _userManager.GetUserAsync(authState.User);
            if (user == null)
            {
                StatusMessage = $"Unable to load user with ID '{_userManager.GetUserId(authState.User)}'.";
                return;
            }

            var changePasswordResult = await _userManager.ChangePasswordAsync(user, inputModel.OldPassword, inputModel.NewPassword);
            if (!changePasswordResult.Succeeded)
            {
                StatusMessage = string.Join(", ", changePasswordResult.Errors);
            }

            await _signInManager.RefreshSignInAsync(user);

            _logger.LogInformation("User changed their password successfully.");
            StatusMessage = "Your password has been changed.";
        }
    }

    public class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; }
    }
}
