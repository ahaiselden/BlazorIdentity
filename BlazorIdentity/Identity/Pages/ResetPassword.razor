@page "/Identity/ResetPassword/{Code}"

@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.WebUtilities;
@using System.ComponentModel.DataAnnotations;
@using System.Text;

@inject UserManager<IdentityUser> _userManager;
@inject NavigationManager NavigationManager;

<title>Reset password</title>
<h3>Reset password</h3>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm EditContext="resetPasswordContext" OnSubmit="OnResetPasswordSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
                        
            <div class="form-group">
                Email
                <InputText class="form-control" @bind-Value="inputModel.Email"></InputText>
                <ValidationMessage For="@(() => inputModel.Email)" />
            </div>
            <div class="form-group">
                Password
                <InputText type="password" class="form-control" @bind-Value="inputModel.Password"></InputText>
                <ValidationMessage For="@(() => inputModel.Password)" />
            </div>
            <div class="form-group">
                Confirm Password
                <InputText type="password" class="form-control" @bind-Value="inputModel.ConfirmPassword"></InputText>
                <ValidationMessage For="@(() => inputModel.ConfirmPassword)" />
            </div>
            <button type="submit" class="btn btn-primary">Reset</button>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public string Code { get; set; }

    public EditContext resetPasswordContext { get; set; }

    private InputModel inputModel { get; set; }

    protected override void OnInitialized()
    {
        resetPasswordContext = new EditContext(resetPasswordContext);

        if (Code == null)
        {
            // TODO Change to inline if in HTML.

            //// return BadRequest("A code must be supplied for password reset.");
        }
        else
        {
            inputModel = new InputModel
            {
                Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code))
            };

            return;
        }
    }

    private async void OnResetPasswordSubmit(EditContext editContext)
    {
        if (editContext.Validate())
        {
            var user = await _userManager.FindByEmailAsync(inputModel.Email);

            if (user == null)
            {
                // Don't reveal that the user does not exist
                NavigationManager.NavigateTo("/Identity/ResetPasswordConfirmation");
                return;
            }

            var result = await _userManager.ResetPasswordAsync(user, inputModel.Code, inputModel.Password);
            
            if (result.Succeeded)
            {
                NavigationManager.NavigateTo("/Identity/ResetPasswordConfirmation");
                return;
            }

            return;
        }

        editContext = new EditContext(resetPasswordContext);
        StateHasChanged();
    }

    public class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; }

        public string Code { get; set; }
    }
}
